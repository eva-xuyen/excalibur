<?xml version="1.0"?>

<!--
     Copyright 2004 The Apache Software Foundation
     Licensed  under the  Apache License,  Version 2.0  (the "License");
     you may not use  this file  except in  compliance with the License.
     You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed  under the  License is distributed on an "AS IS" BASIS,
     WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
     implied.

     See the License for the specific language governing permissions and
     limitations under the License.
-->
<document>
    <properties>
        <author email="leif.AT.tanukisoftware.DOT.com">Leif Mortenson</author>
        <title>Excalibur Instrument - Component Integration</title>
    </properties>
    <body>
        <section name="Component Integration">
            <p>
                Under Construction.
            </p>
        </section>
        <section name="Dependencies">
            <p>
                The instrument API has been designed to avoid adding any dependencies to
                a component other than the <b>instrument-api.jar</b> itself.  This jar by itself
                is very small and light weight.
            </p>
            <p>
                The exception is where the <b>AbstractLogEnabledInstrumentable</b> base class
                is extended.  The use of this class places a dependency on
                <b>avalon-framework-api.jar</b>.
            </p>
        </section>
        <section name="Types of Instruments">
            <p>
                There are currently two basic types of instruments supported by the Instrument
                API.  Counters and Value Instruments.
            </p>
            <p>
                Counter instruments can be used to track the number of times an action takes
                place.  Component developers simply increment the counters.  The Instrument
                Manager will then allow the user to decide on a sample period at runtime,
                over which to count the number of times the instrument is incremented.
                It is possible to to increment a counter instrument by 1, or any positive
                integer.
            </p>
            <p>
                Value instruments are used to track how quantitative values change over time.
                They can be used to track pool sizes, execution times, resource levels, etc.
                Once again, Component developers set values to the instrument as the application
                executes.  Users will have the ability to configure how the instrument values
                are used from the Instrument Manager.   The default implementation allows the
                user to select a sample interval of say 1 minute.  Then track the maximum,
                minimum, and/or mean values of the instrument within each 1 minute interval over
                the last 24 hours, for example.
            </p>
            <p>
                To date, these two simple instrument types have made it possible instrument
                everything that has been thrown at them.  If you encounter a problem which can
                not be applied to either Instrument type, post a message on the user list and
                it will be discussed.
            </p>
        </section>
        <section name="Instrument Use Examples">
            <p>
                Before delving into how to Instrument a component as a whole.  It will be
                useful to cover some individual <a href="instrument-examples.html">examples</a>
                of how Instruments can be used within a component.
            </p>
        </section>
            
        <section name="Instrumentation Methods">
            <subsection name="Extend the AbstractInstrumentable base class">
            </subsection>
            <subsection name="Extend the AbstractLogEnabledInstrumentable base class">
            </subsection>
            <subsection name="Impement the Instrumentable interface">
            </subsection>
        </section>
    </body>
</document>
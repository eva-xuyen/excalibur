<?xml version="1.0"?>

<!--
     Copyright 2004 The Apache Software Foundation
     Licensed  under the  Apache License,  Version 2.0  (the "License");
     you may not use  this file  except in  compliance with the License.
     You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed  under the  License is distributed on an "AS IS" BASIS,
     WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
     implied.

     See the License for the specific language governing permissions and
     limitations under the License.
-->
<document>
    <properties>
        <author email="leif.AT.tanukisoftware.DOT.com">Leif Mortenson</author>
        <title>Excalibur Instrument - Extending the AbstractInstrumentable Base-Class</title>
    </properties>
    <body>
        <section name="Extending the AbstractInstrumentable Base-Class">
            <p>
                Under Construction.
            </p>
            <source>
                <![CDATA[public class MyNiftyComponent
    extends AbstractInstrumentable
{
    private CounterInstrument m_instrumentPushes;
    private CounterInstrument m_instrumentPops;
    private ValueInstrument m_instrumentStackSize;
    private ValueInstrument m_instrumentProcessTime;
          
    public MyNiftyComponent()
    {
        addInstrument( m_instrumentPushes = new CounterInstrument( "pushes" ) );
        addInstrument( m_instrumentPops = new CounterInstrument( "pops" ) );
        addInstrument( m_instrumentStackSize = new ValueInstrument( "stack-size" ) );
        addInstrument( m_instrumentProcessTime = new ValueInstrument( "process-time" ) );
    }
    
    public void push( Object obj )
    {
        m_stack.push( obj );
        
        m_instrumentPushes.increment();
        m_instrumentStackSize.setValue( m_stack.size() );
    }
    
    public Object pop()
    {
        Object obj = m_stack.pop();
        
        m_instrumentPops.increment();
        m_instrumentStackSize.setValue( m_stack.size() );
        
        return obj;
    }
    
    public void process()
    {
        long start = System.currentTimeMillis();
        
        // Do something that takes a while.
        
        m_instrumentProcessTime.setValue( (int)( System.currentTimeMillis() - start ) );
    }
}]]>
            </source>
        </section>
    </body>
</document>
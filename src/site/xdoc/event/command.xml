<?xml version="1.0"?>

<!--
     Licensed to the Apache Software Foundation (ASF) under one or more
     contributor license agreements.  See the NOTICE file distributed with
     this work for additional information regarding copyright ownership.
     The ASF licenses this file to You under the Apache License, Version 2.0
     (the "License"); you may not use this file except in compliance with
     the License.  You may obtain a copy of the License at
     
     http://www.apache.org/licenses/LICENSE-2.0
     
     Unless required by applicable law or agreed to in writing, software
     distributed  under the  License is distributed on an "AS IS" BASIS,
     WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
     implied.
     
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<document>
    <properties>
        <title>Event - Command</title>
    </properties>
    <body>
        <section name="Why Command Was Created">
            <p>
        Command was created as a way to offload management functions
        to a CommandManager which would execute the functions in the
        background.  The benefits of this approach are tremendous
        when you are handling several requests at the same time.  As
        load increases, you don't increase the frequency in which
        certain functions are performed (as in the normal synchronous
        management), and you reduce the time for the critical path
        to execute.  The critical path is the part of your code that
        actually solves your problems as opposed to managing resources.
            </p>
        </section>
        <section name="When To Use Command">
            <p>
        A better question might be "when should I not to use Command?".
        The complexity of the thread management and command timing is
        completely hidden from you.  That makes Command as easy to
        use as any event based system like Swing.  That said, if you
        have a really trivial system, or you do not work with heavy
        request loads it is definitely easier to design your system
        the old fashioned way.  If you do expect your application to
        work under heavy load, you will find Command to be indespensible.
            </p>
        </section>
        <section name="Core Concepts">
            <p>
        Command is built on top of
                <link href="event.html">Event</link>.
        That means we use a Command Sink to enqueue Commands for the
        CommandManager to process.  The CommandManager then executes the
        commands as they are pulled off of the queue.  A Command can be
        a repeating command, so CommandManager will automatically requeue
        that command for you.
            </p>
            <section name="Command">
                <p>
          A Command is an object that performs any function you desire.
          You create it by simply implementing the Command interface.
          There are three types of commands: a generic command that is
          executed immediately in a background thread, a delayed command
          that is executed after a specified period of time, and a
          repeated command that is executed again and again until the
          Command Manager is shut down.
                </p>
            </section>
            <section name="Command Manager">
                <p>
          The Command Manager takes care of processing both Commands
          and Signals.  With Signals, it will notify the registered
          Signal listener.  With commands it schedules their execution
          in a background thread.
                </p>
            </section>
            <section name="Thread Manager">
                <p>
          A Thread Manager takes care of the threading policy for the
          Command Manager.  It manages the thread pool size, and how
          often the Event Pipeline (the path from a Source to an
          EventHandler) is checked.
                </p>
            </section>
        </section>
    </body>
</document>

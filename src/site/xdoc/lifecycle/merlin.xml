<?xml version="1.0"?>
<!--
     Licensed to the Apache Software Foundation (ASF) under one or more
     contributor license agreements.  See the NOTICE file distributed with
     this work for additional information regarding copyright ownership.
     The ASF licenses this file to You under the Apache License, Version 2.0
     (the "License"); you may not use this file except in compliance with
     the License.  You may obtain a copy of the License at
     
     http://www.apache.org/licenses/LICENSE-2.0
     
     Unless required by applicable law or agreed to in writing, software
     distributed  under the  License is distributed on an "AS IS" BASIS,
     WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
     implied.
     
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<document>
    <properties>
        <title>Merlin Lifecycle Extensions</title>
    </properties>
    <body>
        <section name="Outdated content">
            <p>
                <b>Merlin no longer uses the excalibur-lifecycle package.</b>
            </p>
        </section>
        <section name="Example">

            <section name="Create your lifestyle stage interface">

                <p>
          The following interface is your domain specific lifecycle stage 
          interface.  It is the interface that an extension handler will use to
          interact with your component during deployment and decommissioning.
                </p>

                <source>
 public interface Exploitable
 {
    /**
     * Operation invoked by an exploitation manager.
     * @param message a message to be displayed
     */
     void exploit( String message );
 }
                </source>

            </section>

            <section name="Create the lifestyle extension handler">
                <p>
          An extension handler is the implementation class that will be 
          activated by the Merlin container to handle domain specific tasks 
          during the deployment and decommissioning phases.  The extension can 
          implement etier or both of the Creator and Accessor interfaces 
          depeding on the particular extension requirements.  IN this example we
          are defining a simple creation stage handler that supplies a message 
          to an instance of Exploitable.
                </p>
                <source>
 public class ExploitationManager implements Creator
 {
    /**
     * Operation invoked by a container to request creation
     * stage extension interception.
     * @param object a component to manager
     * @param context the context
     */
     public void create( Object object, Context context )
     {
         if( object instanceof Exploitable )
         {
             ((Expoitable)object).exploit( "hello" );
         }
     }

    /**
     * Operation invoked by a container to request destroy
     * stage extension interception.
     * @param object a component to manager
     * @param context the context
     */
     public void destroy( Object object, Context context )
     {
     }
 }
                </source>
                <p>
          To complete the defintion of you extension handler you need to prepare
          the meta-info that will be used by Merlin to identify the extension 
          and the stage interface is supports.  The following &lt;type/&gt; 
          declaration includes an &lt;extensions/&gt; tag that contains a
                    &lt;reference/&gt; element that includes the reference to the
          Exploitable lifecycle stage interface. This is the key that Merlin 
          uses to associate a handler with a component.  If you extension class
          requires any specific context values, they should be declared in a 
          context element within the extension element.
                </p>

                <source>
                    &lt;type&gt;

                    &lt;info&gt;
                    &lt;name&gt;my-extension-handler&lt;/name&gt;
                    &lt;/info&gt;

                    &lt;extensions&gt;
                    &lt;extension&gt;
                    &lt;name&gt;exploitation&lt;/name&gt;
                    &lt;reference type="Exploitable" version="1.0"/>
                    &lt;/extension&gt;
                    &lt;/extensions&gt;

                    &lt;/type&gt;

                </source>

            </section>

            <section name="Create a component implementing the stage interface">
                <source>
 public class MyComponent extends AbstractLogEnabled implements Exploitable
 {
    /**
     * Operation invoked by an exploitation manager.
     * @param message a message to be displayed
     */
     public void exploit( String message )
     {
         getLogger().info( message );
     }
 }
                </source>

                <p>
          To complete the defintion of your component you need to prepare the 
          meta-info that will be used by Merlin to identify the stage interface
          is requires a handler for.  The following &lt;type/&gt; declaration 
          includes an &lt;stage/&gt; tag that contains a &lt;reference/&gt; 
          element that includes the reference to the Exploitable lifecycle stage
          interface. This is the key that Merlin uses to associate the component
          with a handler capable of handling the Exploitable interface.
                </p>

                <source>
                    &lt;type&gt;

                    &lt;info&gt;
                    &lt;name&gt;my-component&lt;/name&gt;
                    &lt;/info&gt;

                    &lt;stages&gt;
                    &lt;stage&gt;
                    &lt;name&gt;exploit-me&lt;/name&gt;
                    &lt;reference type="Exploitable" version="1.0"/>
                    &lt;/stage&gt;
                    &lt;/stages&gt;

                    &lt;/type&gt;

                </source>
            </section>

            <section name="Register you component and the extension">

                <p>
          To complete the process you need to declare your handler and component
          in a jar manifest file.  The following entries show the declaration of
          the component and the extension handler.
                </p>

                <source>
  Manifest-Version: 1.0
  Created-By: Ant 1.5

  Name: MyComponent.class
  Avalon: Type

  Name: ExploitationManager.class
  Avalon: Type
                </source>

            </section>

            <section name="Execute the example">

                <p>
          To execute the example you simply need to include a reference to you 
          component within a Merlin container declaration.  The following XML 
          source declares a Merlin kernel, container, and component.  You don't
          need to include the handler because Merlin can sort that out itself 
          based on the information supplied in the meta-info declarations.
                </p>

                <source>
                    &lt;kernel&gt;

                    &lt;container name="my-container&gt;

                    &lt;classpath&gt;
                    &lt;fileset dir="lib"&gt;
                    &lt;include name="my-domo.jar"/&gt;
                    &lt;/fileset&gt;
                    &lt;/classpath&gt;

                    &lt;component name="demo" class="MyComponent" activation="startup"/&gt;

                    &lt;container&gt;

                    &lt;/kernel&gt;
                </source>

            </section>

        </section>

    </body>
</document>

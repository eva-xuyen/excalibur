<?xml version="1.0" encoding="UTF-8"?>

<!--
     Licensed to the Apache Software Foundation (ASF) under one or more
     contributor license agreements.  See the NOTICE file distributed with
     this work for additional information regarding copyright ownership.
     The ASF licenses this file to You under the Apache License, Version 2.0
     (the "License"); you may not use this file except in compliance with
     the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed  under the  License is distributed on an "AS IS" BASIS,
     WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
     implied.

     See the License for the specific language governing permissions and
     limitations under the License.
-->
<document>

    <properties>
        <title>Fortress Getting Started</title>

    </properties>

    <body>
        <section name="Servlet Based Applications">
            <p>
        Servlet based applications are viewed on the web.  Examples of these
        types of Java projects are Jakarta Turbine, and Apache Cocoon.
        Servlets have their own lifecycle, so it is rather easy to tie the
        life of a container to the life of a servlet.
            </p>
            <p>
        Servlet based applications can either tie the Avalon container to
        a Servlet or bind it to JNDI.  The advantage of binding it to JNDI is
        better resource management because the container is not being torn
        down and rebuilt periodically.  The disadvantage is that there is no
        standard way of doing it in your Servlet container.  Most of the time
        we bind the container to a Servlet like the following code:
            </p>
            <source>
                <![CDATA[
public class MyAvalonServlet implements HttpServlet
{
    private static final String ROOT =
      "resource://org/apache/excalibur/fortress/examples/servlet/";
    private static final String XCONF =
      ROOT + ServletContainer.xconf";
    private static final String XLOG =
      ROOT + ServletContainer.xlog";
    private static final String ROLES =
      ROOT + ServletContainer.roles";

    private MyServletContainer m_container;
    private ContainerManager m_containerManager;

    /**
     * Initializes Servlet and creates a <code>ServletContainer</code> instance
     *
     * NOTE: this is the servlet init code.
     *
     * @exception ServletException if an error occurs
     */
    public void init()
        throws ServletException
    {
        super.init();

        try
        {
            final FortressConfig config = new FortressConfig();
            config.setContainerClass(
              "org.apache.avalon.fortress.examples.servlet.ServletContainer" );
            config.setContextDirectory( "./" );
            config.setWorkDirectory( "./" );
            config.setContainerConfiguration( XCONF );
            config.setLoggerManagerConfiguration( XLOG );
            config.setRoleManagerConfiguration( ROLES );

            m_containerManager =
              new DefaultContainerManager( config.getContext() );
            ContainerUtil.initialize(m_containerManager);

            m_container =
             (ServletContainer)m_containerManager.getContainer();
        }
        catch( Exception e )
        {
            throw new ServletException( "Error during initialization", e );
        }
    }

    /**
     * Pass all servlet requests through to container to be handled. In a more
     * complex system, there could be multiple containers that handle different
     * requests, or a main controlling container with subcontainers for different
     * requests.
     *
     * @param request a <code>ServletRequest</code> instance
     * @param response a <code>ServletResponse</code> instance
     * @exception IOException if an IO error occurs
     * @exception ServletException if a servlet error occurs
     */
    public void service( ServletRequest request, ServletResponse response )
        throws IOException, ServletException
    {
        m_container.handleRequest( request, response );
    }

    /**
     * Disposes of container manager and container instance.
     *
     * NOTE: This is the Servlet destruction callback
     */
    public void destroy()
    {
        ContainerUtil.dispose(m_containerManager);
    }
}
                ]]>
            </source>
        </section>
    </body>
</document>
